// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

// Enum for appointment status
enum AppointmentStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

// Enum for notification status
enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

// Core user table - single source of truth for identity
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  role      UserRole
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  patientProfile      PatientProfile?
  doctorProfile       DoctorProfile?
  timeSlots           TimeSlot[] // For doctors
  bookedAppointments  Appointment[]      @relation("BookedByUser")
  patientAppointments Appointment[]      @relation("PatientUser")
  auditActions        AuditAppointment[] @relation("AuditActionBy")
  notifications       Notification[]

  @@map("users")
}

// Patient-specific information
model PatientProfile {
  id               String   @id @default(uuid())
  userId           String   @unique @map("user_id")
  dateOfBirth      DateTime @map("date_of_birth")
  shortDescription String?  @map("short_description")
  address          String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patient_profiles")
}

// Doctor-specific information
model DoctorProfile {
  id               String   @id @default(uuid())
  userId           String   @unique @map("user_id")
  specialty        String
  shortDescription String?  @map("short_description")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("doctor_profiles")
}

// Time slots for doctor availability
model TimeSlot {
  id        String    @id @default(uuid())
  startTime DateTime  @map("start_time")
  endTime   DateTime  @map("end_time")
  doctorId  String    @map("doctor_id")
  deletedAt DateTime? @map("deleted_at") // Soft delete
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  doctor       User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@index([doctorId])
  @@index([startTime, endTime])
  @@map("time_slots")
}

// Appointments
model Appointment {
  id             String            @id @default(uuid())
  slotId         String            @map("slot_id")
  bookedByUserId String            @map("booked_by_user_id")
  patientId      String            @map("patient_id")
  status         AppointmentStatus @default(BOOKED)
  notes          String? // Optional notes/reason for appointment
  idempotencyKey String?           @map("idempotency_key") // For idempotent requests
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  // Relations
  slot         TimeSlot           @relation(fields: [slotId], references: [id], onDelete: Cascade)
  bookedByUser User               @relation("BookedByUser", fields: [bookedByUserId], references: [id])
  patient      User               @relation("PatientUser", fields: [patientId], references: [id])
  auditTrail   AuditAppointment[]

  // Critical: Prevent double-booking
  // Only one BOOKED appointment per slot at a time
  @@unique([slotId, status], name: "unique_booked_slot", map: "idx_unique_booked_slot")
  @@index([slotId])
  @@index([bookedByUserId])
  @@index([patientId])
  @@index([status])
  @@index([idempotencyKey])
  @@map("appointments")
}

// Audit trail for appointment changes
model AuditAppointment {
  id             String            @id @default(uuid())
  appointmentId  String            @map("appointment_id")
  stateChanged   AppointmentStatus @map("state_changed")
  actionByUserId String            @map("action_by_user_id")
  action         String // e.g., "CREATED", "CANCELLED", "COMPLETED"
  createdAt      DateTime          @default(now()) @map("created_at")

  // Relations
  appointment  Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  actionByUser User        @relation("AuditActionBy", fields: [actionByUserId], references: [id])

  @@index([appointmentId])
  @@index([actionByUserId])
  @@index([createdAt])
  @@map("audit_appointments")
}

// Notification audit log (permanent record of sent/failed notifications)
model Notification {
  id        String             @id @default(uuid())
  title     String
  content   String
  userId    String             @map("user_id")
  deviceId  String?            @map("device_id") // For push notifications
  sentAt    DateTime?          @map("sent_at")
  status    NotificationStatus @default(PENDING)
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("notifications")
}
