
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dateOfBirth: 'dateOfBirth',
  shortDescription: 'shortDescription',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  specialty: 'specialty',
  shortDescription: 'shortDescription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TimeSlotScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  doctorId: 'doctorId',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  slotId: 'slotId',
  bookedByUserId: 'bookedByUserId',
  patientId: 'patientId',
  status: 'status',
  notes: 'notes',
  idempotencyKey: 'idempotencyKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditAppointmentScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  stateChanged: 'stateChanged',
  actionByUserId: 'actionByUserId',
  action: 'action',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  userId: 'userId',
  deviceId: 'deviceId',
  sentAt: 'sentAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  ADMIN: 'ADMIN'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  BOOKED: 'BOOKED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  User: 'User',
  PatientProfile: 'PatientProfile',
  DoctorProfile: 'DoctorProfile',
  TimeSlot: 'TimeSlot',
  Appointment: 'Appointment',
  AuditAppointment: 'AuditAppointment',
  Notification: 'Notification'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/nhinlechi/Documents/Repos/training/system-design-practice/projects/clinic_appointment_system/src/node_modules/.pnpm/@prisma+client@6.16.3_prisma@6.16.3_typescript@5.9.3__typescript@5.9.3/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/nhinlechi/Documents/Repos/training/system-design-practice/projects/clinic_appointment_system/src/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../../../.env"
  },
  "relativePath": "../../../../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Enum for user roles\nenum UserRole {\n  PATIENT\n  DOCTOR\n  ADMIN\n}\n\n// Enum for appointment status\nenum AppointmentStatus {\n  BOOKED\n  CANCELLED\n  COMPLETED\n}\n\n// Enum for notification status\nenum NotificationStatus {\n  PENDING\n  SENT\n  FAILED\n}\n\n// Core user table - single source of truth for identity\nmodel User {\n  id        String   @id @default(uuid())\n  email     String   @unique\n  name      String\n  role      UserRole\n  address   String?\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  patientProfile      PatientProfile?\n  doctorProfile       DoctorProfile?\n  timeSlots           TimeSlot[] // For doctors\n  bookedAppointments  Appointment[]      @relation(\"BookedByUser\")\n  patientAppointments Appointment[]      @relation(\"PatientUser\")\n  auditActions        AuditAppointment[] @relation(\"AuditActionBy\")\n  notifications       Notification[]\n\n  @@map(\"users\")\n}\n\n// Patient-specific information\nmodel PatientProfile {\n  id               String   @id @default(uuid())\n  userId           String   @unique @map(\"user_id\")\n  dateOfBirth      DateTime @map(\"date_of_birth\")\n  shortDescription String?  @map(\"short_description\")\n  address          String?\n  createdAt        DateTime @default(now()) @map(\"created_at\")\n  updatedAt        DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"patient_profiles\")\n}\n\n// Doctor-specific information\nmodel DoctorProfile {\n  id               String   @id @default(uuid())\n  userId           String   @unique @map(\"user_id\")\n  specialty        String\n  shortDescription String?  @map(\"short_description\")\n  createdAt        DateTime @default(now()) @map(\"created_at\")\n  updatedAt        DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"doctor_profiles\")\n}\n\n// Time slots for doctor availability\nmodel TimeSlot {\n  id        String    @id @default(uuid())\n  startTime DateTime  @map(\"start_time\")\n  endTime   DateTime  @map(\"end_time\")\n  doctorId  String    @map(\"doctor_id\")\n  deletedAt DateTime? @map(\"deleted_at\") // Soft delete\n  createdAt DateTime  @default(now()) @map(\"created_at\")\n  updatedAt DateTime  @updatedAt @map(\"updated_at\")\n\n  // Relations\n  doctor       User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)\n  appointments Appointment[]\n\n  @@index([doctorId])\n  @@index([startTime, endTime])\n  @@map(\"time_slots\")\n}\n\n// Appointments\nmodel Appointment {\n  id             String            @id @default(uuid())\n  slotId         String            @map(\"slot_id\")\n  bookedByUserId String            @map(\"booked_by_user_id\")\n  patientId      String            @map(\"patient_id\")\n  status         AppointmentStatus @default(BOOKED)\n  notes          String? // Optional notes/reason for appointment\n  idempotencyKey String?           @map(\"idempotency_key\") // For idempotent requests\n  createdAt      DateTime          @default(now()) @map(\"created_at\")\n  updatedAt      DateTime          @updatedAt @map(\"updated_at\")\n\n  // Relations\n  slot         TimeSlot           @relation(fields: [slotId], references: [id], onDelete: Cascade)\n  bookedByUser User               @relation(\"BookedByUser\", fields: [bookedByUserId], references: [id])\n  patient      User               @relation(\"PatientUser\", fields: [patientId], references: [id])\n  auditTrail   AuditAppointment[]\n\n  // Critical: Prevent double-booking\n  // Only one BOOKED appointment per slot at a time\n  @@unique([slotId, status], name: \"unique_booked_slot\", map: \"idx_unique_booked_slot\")\n  @@index([slotId])\n  @@index([bookedByUserId])\n  @@index([patientId])\n  @@index([status])\n  @@index([idempotencyKey])\n  @@map(\"appointments\")\n}\n\n// Audit trail for appointment changes\nmodel AuditAppointment {\n  id             String            @id @default(uuid())\n  appointmentId  String            @map(\"appointment_id\")\n  stateChanged   AppointmentStatus @map(\"state_changed\")\n  actionByUserId String            @map(\"action_by_user_id\")\n  action         String // e.g., \"CREATED\", \"CANCELLED\", \"COMPLETED\"\n  createdAt      DateTime          @default(now()) @map(\"created_at\")\n\n  // Relations\n  appointment  Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)\n  actionByUser User        @relation(\"AuditActionBy\", fields: [actionByUserId], references: [id])\n\n  @@index([appointmentId])\n  @@index([actionByUserId])\n  @@index([createdAt])\n  @@map(\"audit_appointments\")\n}\n\n// Notification audit log (permanent record of sent/failed notifications)\nmodel Notification {\n  id        String             @id @default(uuid())\n  title     String\n  content   String\n  userId    String             @map(\"user_id\")\n  deviceId  String?            @map(\"device_id\") // For push notifications\n  sentAt    DateTime?          @map(\"sent_at\")\n  status    NotificationStatus @default(PENDING)\n  createdAt DateTime           @default(now()) @map(\"created_at\")\n  updatedAt DateTime           @updatedAt @map(\"updated_at\")\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([status])\n  @@index([createdAt])\n  @@map(\"notifications\")\n}\n",
  "inlineSchemaHash": "355e308ce300a4ccc44a98a223ff0654e62febbdf1a03edb388f809b6f9990bd",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"patientProfile\",\"kind\":\"object\",\"type\":\"PatientProfile\",\"relationName\":\"PatientProfileToUser\"},{\"name\":\"doctorProfile\",\"kind\":\"object\",\"type\":\"DoctorProfile\",\"relationName\":\"DoctorProfileToUser\"},{\"name\":\"timeSlots\",\"kind\":\"object\",\"type\":\"TimeSlot\",\"relationName\":\"TimeSlotToUser\"},{\"name\":\"bookedAppointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"BookedByUser\"},{\"name\":\"patientAppointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"PatientUser\"},{\"name\":\"auditActions\",\"kind\":\"object\",\"type\":\"AuditAppointment\",\"relationName\":\"AuditActionBy\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"}],\"dbName\":\"users\"},\"PatientProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"date_of_birth\"},{\"name\":\"shortDescription\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"short_description\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PatientProfileToUser\"}],\"dbName\":\"patient_profiles\"},\"DoctorProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"specialty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shortDescription\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"short_description\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DoctorProfileToUser\"}],\"dbName\":\"doctor_profiles\"},\"TimeSlot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"start_time\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"end_time\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"doctor_id\"},{\"name\":\"deletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"deleted_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TimeSlotToUser\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToTimeSlot\"}],\"dbName\":\"time_slots\"},\"Appointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slotId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"slot_id\"},{\"name\":\"bookedByUserId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"booked_by_user_id\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"patient_id\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AppointmentStatus\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idempotencyKey\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"idempotency_key\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"slot\",\"kind\":\"object\",\"type\":\"TimeSlot\",\"relationName\":\"AppointmentToTimeSlot\"},{\"name\":\"bookedByUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BookedByUser\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PatientUser\"},{\"name\":\"auditTrail\",\"kind\":\"object\",\"type\":\"AuditAppointment\",\"relationName\":\"AppointmentToAuditAppointment\"}],\"dbName\":\"appointments\"},\"AuditAppointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"appointment_id\"},{\"name\":\"stateChanged\",\"kind\":\"enum\",\"type\":\"AppointmentStatus\",\"dbName\":\"state_changed\"},{\"name\":\"actionByUserId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"action_by_user_id\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToAuditAppointment\"},{\"name\":\"actionByUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AuditActionBy\"}],\"dbName\":\"audit_appointments\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"deviceId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"device_id\"},{\"name\":\"sentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"sent_at\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"NotificationStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"}],\"dbName\":\"notifications\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

